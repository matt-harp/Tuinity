From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: matt-harp <53673965+matt-harp@users.noreply.github.com>
Date: Sun, 28 Jun 2020 00:11:46 -0500
Subject: [PATCH] Add Chaos config class


diff --git a/src/main/java/co/chaoticpvp/ChaosConfig.java b/src/main/java/co/chaoticpvp/ChaosConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf460edf575701f90238abf6cfa4edf66543d89c
--- /dev/null
+++ b/src/main/java/co/chaoticpvp/ChaosConfig.java
@@ -0,0 +1,153 @@
+package co.chaoticpvp;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+
+/**
+ * @author NightyNight
+ */
+public class ChaosConfig {
+    private static File CONFIG_FILE;
+
+    private static final String HEADER = "This is the main configuration file for FluxSpigot.\n" +
+            "This is a modification of TacoSpigot. Based on main repository of AmbrosL/CustomSpigot\n";
+
+    /*========================================================================*/
+    static YamlConfiguration config;
+    static int version;
+    /*========================================================================*/
+
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try
+        {
+            System.out.println("Loading FluxSpigot config from " + configFile.getName());
+            config.load(CONFIG_FILE);
+
+        }
+        catch (IOException ex)
+        {
+
+        }
+        catch (InvalidConfigurationException ex)
+        {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load flux.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+    }
+
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods())
+        {
+            if (Modifier.isPrivate(method.getModifiers()))
+            {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE)
+                {
+                    try
+                    {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+
+                    }
+                    catch (InvocationTargetException ex)
+                    {
+                        throw Throwables.propagate(ex.getCause());
+
+                    }
+                    catch (Exception ex)
+                    {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+
+                    }
+
+                }
+
+            }
+
+        }
+
+        try
+        {
+            config.save(CONFIG_FILE);
+        }
+        catch (IOException ex)
+        {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+
+        }
+
+    }
+
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+
+    }
+
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+
+    }
+
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+
+    }
+
+
+    private static float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return (float)config.getDouble(path, config.getDouble(path));
+
+    }
+
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+
+    }
+
+
+    private static <T> List<T> getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    // This is an example for adding a new Configuration Value [No section]
+    /*
+    public static boolean useArraysForBlockStates;
+    private static void useArraysForBlockStates() {
+        useArraysForBlockStates = getBoolean("useArraysForBlockStates", false);
+    }
+    */
+}
